{"version":3,"sources":["Test.js","App.js","serviceWorker.js","index.js"],"names":["Test","props","startScan","qrScanner","start","stopSacn","stop","setResult","result","setState","timestamp","Date","toString","label","textContent","camQrResultTimestamp","style","color","handleOnChange","event","setInversionMode","target","value","fileChange","file","files","QrScanner","scanImage","then","fileResult","catch","e","console","log","state","hasCamera","this","videoElem","document","getElementById","id","muted","playsinline","onChange","onClick","type","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQA0GeA,E,YArGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,UAAY,WACV,EAAKC,UAAUC,SAbE,EAgBnBC,SAAW,WACT,EAAKF,UAAUG,QAjBE,EA8BnBC,UAAY,SAACC,GACX,EAAKC,SAAS,CACZD,SACAE,WAAW,IAAIC,MAAOC,mBAEpBC,GACEC,YAAcN,EACpB,EAAKO,qBAAqBD,aAAc,IAAIH,MAAOC,iBAF/CC,GAGEG,MAAMC,MAAQ,QAtCH,EA2CnBC,eAAiB,SAAAC,GACf,EAAKhB,UAAUiB,iBAAiBD,EAAME,OAAOC,QA5C5B,EA+CnBC,WAAa,SAAAJ,GACX,IAAMK,EAAOL,EAAME,OAAOI,MAAM,GAC3BD,GAGLE,IAAUC,UAAUH,GACjBI,MAAK,SAAApB,GAAM,OAAI,EAAKC,SAAS,CAAEoB,WAAYrB,OAC3CsB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OArDhB,EAAKG,MAAQ,CACX1B,OAAQ,OACRE,UAAW,GACXyB,WAAW,EACXN,WAAY,QANG,E,iFAoBE,IAAD,OAElBH,IAAUS,YAAYP,MAAK,SAAAO,GACzBH,QAAQC,IAAI,aAAcE,GAC1B,EAAK1B,SAAS,CAAE0B,UAAWA,EAAUvB,gBAEvCwB,KAAKC,UAAYC,SAASC,eAAe,YACzCH,KAAKjC,UAAY,IAAIuB,IAAUU,KAAKC,WAAW,SAAA7B,GAAM,OAAI,EAAKD,UAAUC,Q,+BAkCxE,OACE,6BACE,6BACE,iDACA,kDACA,0BAAMgC,GAAG,kBAAmBJ,KAAKF,MAAMC,WACvC,6BACA,2BAAOM,OAAK,EAACC,aAAW,EAACF,GAAG,cAG9B,6BACE,8BAEF,iDACA,0BAAMA,GAAG,iBAAkBJ,KAAKF,MAAM1B,QACtC,6BACA,iDACA,0BAAMgC,GAAG,2BAA4BJ,KAAKF,MAAMxB,WAChD,6BAEA,6BACE,4BAAQ8B,GAAG,wBAAwBG,SAAUP,KAAKlB,gBAChD,4BAAQI,MAAM,YAAd,qDACA,4BAAQA,MAAM,UAAd,iEACA,4BAAQA,MAAM,QAAd,cAEF,8BAEF,4BAAQsB,QAASR,KAAKlC,WAAtB,cACA,4BAAQ0C,QAASR,KAAK/B,UAAtB,aACA,6BACA,+CACA,2BAAOwC,KAAK,OAAOL,GAAG,gBAAgBG,SAAUP,KAAKb,aACrD,iDACA,0BAAMiB,GAAG,kBAAkBJ,KAAKF,MAAML,iB,GAhG3BiB,aCQJC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD6H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.c27e0fb2.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport QrScanner from 'qr-scanner';\nimport './App.css';\n\nclass Test extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      result: 'None',\n      timestamp: '',\n      hasCamera: false,\n      fileResult: 'None'\n    }\n\n    // this.handleScan = this.handleScan.bind(this)\n  }\n\n  startScan = () => {\n    this.qrScanner.start();\n  }\n\n  stopSacn = () => {\n    this.qrScanner.stop();\n  }\n\n  componentDidMount() {\n\n    QrScanner.hasCamera().then(hasCamera => {\n      console.log('hasCamera ', hasCamera)\n      this.setState({ hasCamera: hasCamera.toString() })\n    });\n    this.videoElem = document.getElementById('qr-video');\n    this.qrScanner = new QrScanner(this.videoElem, result => this.setResult(result));\n  }\n\n  setResult = (result) => {\n    this.setState({\n      result,\n      timestamp: new Date().toString()\n    })\n    let label;\n    label.textContent = result;\n    this.camQrResultTimestamp.textContent = new Date().toString();\n    label.style.color = 'teal';\n    // clearTimeout(label.highlightTimeout);\n    // label.highlightTimeout = setTimeout(() => label.style.color = 'inherit', 100);\n  }\n\n  handleOnChange = event => {\n    this.qrScanner.setInversionMode(event.target.value);\n  }\n\n  fileChange = event => {\n    const file = event.target.files[0];\n    if (!file) {\n      return;\n    }\n    QrScanner.scanImage(file)\n      .then(result => this.setState({ fileResult: result }))\n      .catch(e => {\n        console.log(e)\n      });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <div>\n          <h1>Scan from WebCam:</h1>\n          <b>Device has camera: </b>\n          <span id=\"cam-has-camera\" >{this.state.hasCamera}</span>\n          <br />\n          <video muted playsinline id=\"qr-video\" />\n        </div>\n\n        <div>\n          <br />\n        </div>\n        <b>Detected QR code: </b>\n        <span id=\"cam-qr-result\" >{this.state.result}</span>\n        <br />\n        <b>Last detected at: </b>\n        <span id=\"cam-qr-result-timestamp\" >{this.state.timestamp}</span>\n        <hr />\n\n        <div>\n          <select id=\"inversion-mode-select\" onChange={this.handleOnChange}>\n            <option value=\"original\">Scan original (dark QR code on bright background)</option>\n            <option value=\"invert\">Scan with inverted colors (bright QR code on dark background)</option>\n            <option value=\"both\">Scan both</option>\n          </select>\n          <br />\n        </div>\n        <button onClick={this.startScan}>start scan</button>\n        <button onClick={this.stopSacn}>stop scan</button>\n        <hr />\n        <h1>Scan from File:</h1>\n        <input type=\"file\" id=\"file-selector\" onChange={this.fileChange} />\n        <b>Detected QR code: </b>\n        <span id=\"file-qr-result\">{this.state.fileResult}</span>\n      </div>\n    )\n  }\n}\n\nexport default Test;","import React from 'react';\nimport './App.css';\nimport Test from './Test';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}